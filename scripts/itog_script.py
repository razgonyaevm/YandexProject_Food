import sqlite3
import os

from PyQt5.QtWidgets import QMainWindow, QTableWidgetItem
from design_python.itog_python import Ui_Itog


class Itog(QMainWindow, Ui_Itog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

        self.con = sqlite3.connect('other_files/Pirgoroy.db')  # подключаем базу данных

        self.show()
        self.update()

        self.exit_button.clicked.connect(self.ex)  # отслеживаем нажатие кнопки выхода

        # ниже в self.titles записаны названия продуктов, которые используются для приготовления блюда
        self.titles = ["Бананы, гр", "Ветчина, гр", "Горошек зеленый консервированный, уп (200гр)",
                       "Зелень укропа или петрушки, уп (150гр)", "Кабачок, гр", "Капуста белокочанная, гр",
                       "Картофель, гр", "Колбаса копченая, гр", "Крупа гречневая, уп (500гр)",
                       "Крупа манная, уп (500гр)", "Крупа перловая, уп (500гр)", "Крупа рисовая, уп (500гр)",
                       "Кукуруза консервированная, уп (200гр)", "Лимон, гр", "Лук репчатый, гр",
                       "Майонез, уп (200мл)", "Макаронные изделия, уп (450гр)", "Масло оливковое, уп (500мл)",
                       "Масло растительное, уп (1000мл)", "Масло сливочное, уп (200гр)", "Молоко, уп (500мл)",
                       "Морковь, гр", "Мука пшеничная, уп (500гр)", "Мясо (свинина, говядина, курица), гр",
                       "Овсяные хлопья, уп (500гр)", "Огурцы свежие, гр", "Огурцы соленые, гр",
                       "Оливки консервированные, уп (200гр)", "Перец болгарский, гр", "Помидоры, гр",
                       "Пшено, уп (500гр)", "Рыба, гр", "Сахар, уп (500гр)", "Свекла, гр", "Сметана, уп (250мл)",
                       "Сыр мягкий рассольный, уп (200гр)", "Сыр твердый, гр", "Творог, уп (200гр)", "Яблоки, гр",
                       "Яйцо куриное, уп (10шт)"]

        # ниже в self.ans записаны итоговые продукты с количеством для покупки (эта информация будет храниться в
        # файле shopping_list.txt
        self.ans = {
            "Бананы, гр": 0,
            "Ветчина, гр": 0,
            "Горошек зеленый консервированный, уп (200гр)": 0,
            "Зелень укропа или петрушки, уп (150гр)": 0,
            "Кабачок, гр": 0,
            "Капуста белокочанная, гр": 0,
            "Картофель, гр": 0,
            "Колбаса копченая, гр": 0,
            "Крупа гречневая, уп (500гр)": 0,
            "Крупа манная, уп (500гр)": 0,
            "Крупа перловая, уп (500гр)": 0,
            "Крупа рисовая, уп (500гр)": 0,
            "Кукуруза консервированная, уп (200гр)": 0,
            "Лимон, гр": 0,
            "Лук репчатый, гр": 0,
            "Майонез, уп (200мл)": 0,
            "Макаронные изделия, уп (450гр)": 0,
            "Масло оливковое, уп (500мл)": 0,
            "Масло растительное, уп (1000мл)": 0,
            "Масло сливочное, уп (200гр)": 0,
            "Молоко, уп (500мл)": 0,
            "Морковь, гр": 0,
            "Мука пшеничная, уп (500гр)": 0,
            "Мясо (свинина, говядина, курица), гр": 0,
            "Овсяные хлопья, уп (500гр)": 0,
            "Огурцы свежие, гр": 0,
            "Огурцы соленые, гр": 0,
            "Оливки консервированные, уп (200гр)": 0,
            "Перец болгарский, гр": 0,
            "Помидоры, гр": 0,
            "Пшено, уп (500гр)": 0,
            "Рыба, гр": 0,
            "Сахар, уп (500гр)": 0,
            "Свекла, гр": 0,
            "Сметана, уп (250мл)": 0,
            "Сыр мягкий рассольный, уп (200гр)": 0,
            "Сыр твердый, гр": 0,
            "Творог, уп (200гр)": 0,
            "Яблоки, гр": 0,
            "Яйцо куриное, уп (10шт)": 0,
        }

        # ниже в self.id записаны индексы блюд в таблицах
        self.id = {
            "Яичница с помидорами и сыром": 1,
            "Яичница с помидорами и ветчиной": 2,
            "Яичница глазунья": 3,
            "Каша молочная пшенная": 4,
            "Каша манная": 5,
            "Каша молочная рисовая": 6,
            'Каша из овсяных хлопьев "Геркулес"': 7,
            "Каша молочная гречневая": 8,
            "Каша молочная гречневая с яблоком и бананом": 9,
            "Творожная запеканка": 10,
            "Салат овощной с оливковым маслом": 11,
            "Салат овощной со сметаной": 12,
            'Салат "Греческий"': 13,
            "Салат из капусты с огурцом и кукурузой": 14,
            "Салат из капусты с помидорами и сыром": 15,
            'Салат "Метелка" из свеклы, моркови и яблок': 16,
            'Салат "Оливье"': 17,
            'Суп "Солянка"': 18,
            'Суп "Борщ"': 19,
            'Суп "Рассольник"': 20,
            'Суп "Щи"': 21,
            "Суп сливочный рыбный": 22,
            "Молочный суп": 23,
            "Говядина в луковом соусе": 24,
            "Азу с картофелем": 25,
            "Мясо по-барски": 26,
            "Отбивная в тесте": 27,
            "Картофель по-французски": 28,
            "Рыба, запеченная в фольге": 29,
            "Рыба под маринадом": 30,
            "Плов": 31,
            "Макароны отварные": 32,
            "Гречка по-бакински": 33,
            "Картофельное пюре": 34,
            "Рис отварной с овощами": 35,
            "Тушеные овощи": 36
        }
        # вызываем функции по-порядку
        self.itog()
        self.setup()
        self.file()
        self.update()

    def itog(self):
        """функция для соотнесения заказа, который хранится в файле order.txt, с продуктами"""
        keys = list(self.id.keys())
        with open('other_files/id.txt') as file:
            m = int(file.readline())
            for i in keys[::-1]:
                if self.id[i] > m:
                    del self.id[i]
                else:
                    break

        cur = self.con.cursor()
        with open("other_files/order.txt") as file:
            a = list(map(lambda x: x.strip(), file.readlines()))
            if len(a) != 0:
                for i in range(len(a)):
                    m = a[i].rindex(' ')
                    s = a[i][:m]
                    k = int(a[i][m + 1:][:-2])
                    try:
                        s = self.id[s]
                    except KeyError:
                        with open('other_files/id.txt') as file:
                            m = file.readline()
                            self.id[s] = int(m)
                            s = self.id[s]
                    w = f"SELECT * FROM Recipy\nWHERE id = {s}"
                    connect = cur.execute(w).fetchone()
                    for j in range(2, len(connect)):
                        p = self.titles[j - 2]
                        self.ans[p] += connect[j] * k

    def setup(self):
        """функция для обновлений значений в таблице Itog"""
        cur = self.con.cursor()
        for i in self.ans.keys():
            que = "UPDATE Itog SET\n"
            que += f"'Количество'={self.ans[i]}\n"
            que += f"WHERE id={self.titles.index(i) + 1};"
            cur.execute(que)
            self.con.commit()

    def file(self):
        """запись значений списка покупок в файл shopping_list.txt"""
        os.system(r' >shopping_list.txt')
        with open('shopping_list.txt', 'w') as file:
            m = ''
            for i in self.ans.keys():
                m += f"{i}: {self.ans[i]}\n"
                self.ans[i] = 0
            file.write(m[:-1])

    def update(self):
        """обновление таблицы в форме"""
        cur = self.con.cursor()
        result = cur.execute("SELECT * FROM Itog").fetchall()
        self.tableWidget.setRowCount(len(result))
        self.tableWidget.setColumnCount(len(result[0]))
        self.titles = [description[0] for description in cur.description]
        for i, elem in enumerate(result):
            for j, val in enumerate(elem):
                self.tableWidget.setItem(i, j, QTableWidgetItem(str(val)))

    def ex(self):
        """функция выхода"""
        self.close()
